
PewPew Live version: 0.6.132
Lua version: 5.3
PPLAF version: 0.8

content:
	
	chance(int) -> bool - returns true or false with some chance
	new_string(x, y, string) -> id - creates entity and sets string
	is_alive(id) -> bool - checks if entity is alive and not being destroyed
	stop_game() - stops game
	table.copy(table) -> table - copies table by value
	
	global_variables.lua: -	Useful values.

		PI
		TAU
		BIG_NUMBER
		PI_FX
		TAU_FX
		BIG_FX
		LEVEL_WIDTH
		LEVEL_HEIGTH
		START_POS_X
		START_POS_Y
		TIME
		GAME_STATE - if true, main tick will be called
		NULL_FUNCTION - equal to `function() end`
	
	math.

		abs(int) -> int
		floor(int) -> int
		ceil(int) -> int
		round(int) -> int
		random(x1, x2) -> int - fmath.random_int(x1, x2)
	
	fxmath.

		abs(fx) -> fx - fmath.abs_fixedpoint(var)
		floor(fx) -> fx
		ceil(fx) -> fx
		round(fx) -> fx
		random(x1, x2) -> fx - fmath.random_fixedpoint(x1, x2)
		length(x1, y1[, x2, y2]) -> fx - returns length of vector with input: (dx, dy) or (x1, y1, x2, y2)
	
	camera. - 	Makes camera movement more smooth, adds options: camera speed, offset, shooting offset,
				static camera axis, dynamic heigth. Requires entities in entities.player.
		
		options - table with options, use camera.configure() instead
		mode - table, used by camera.configure
		main() - function, used to update camera
		configure(table) - updates camera parametres
	
	entities. -	Tools, making customizable entities creation more flexible. Used by other PPLAF modules.

		meshes - path
		main() - calls ai of every entity
		create(x, y, preset) -> id - creates entity from preset
		remove(id) - removes entity from table

		presets		- 	Every preset contains information needed to create it.
						Constants you need can be included in preset.
		constructor -	Entity can have constructor which will be called while creating it.
						Can be used to add variables in this entity.
		destructor 	-	Entity can have destructor which will be called with entity.remove()
						as it only removes entities from table.
		ai			-	Entity must have ai which will be called every tick.

						Check entities/options.lua for more information

	
	weapons. -	Used to create weapons from presets.

		create(preset) -> array - creates weapon from preset
		main() - calls ai of every weapon

		presets		- 	Weapon preset contains information needed to create it.
						Constants you need can be included in preset.
		constructor -	Weapon can have constructor which will be called while creating it.
						Can be used to add variables in this weapon.
		ai			-	Weapon must have ai which will be called every tick.

						Check weapons/options.lua for more information
	
	bullet. -	Used to create bullets from presets.

		meshes - path
		main() - calls ai of every bullet
		create(x, y, angle, preset) -> id - creates bullet from preset
		remove(id) - removes bullet from table

		presets		- 	Every preset contains information needed to create bullet.
						Constants you need can be included in preset.
		constructor -	Bullet can have constructor which will be called while creating it.
						Can be used to add variables in this bullet or configure wall collision.
		destructor 	-	Entity can have destructor which will be called with bullet.remove()
						as it only removes bullets from table.
		ai			-	Bullet must have ai which will be called every tick.

						Check bullets/options.lua for more information
	
	player. -	Used to create player ships with entities.lua.

		move_ang, move_a, shoot_ang, shoot_a - player inputs

		create(x, y) -> id - creates player ship
		main() - gets player inputs
	
	trigger. -	Used to create triggers, which can be activate by player.

		create({x1, y1, a[, b]}, mesh) -> id - Creates trigger.
				{x, y, radius} creates trigger with form of circle.
				{x1, y1, x2, y2} creates trigger with form of rectangle.
				If mesh is true, adds mesh. Meshes can be changed in trigger.lua.
		get(id) -> bool - checks if player activated trigger
		remove(id) - destroys trigger
	
	switch. -	Used to create switches. If one of triggers was activated,
				it's state will be changed, but it will be switched only in next tick.

		G - index
		create(args1, args2) -> index - Creates switch. Input is same as for trigger.
		remove(index) - destroys switch
		
	wall. -		Used to create walls with meshes.

		G - index
		create(x1, y1, x2, y2) -> index - creates wall with mesh
		remove(index) - destroys wall
		
	crosshair.
	